{"version":3,"sources":["redux/messages.ts","data-mocks/messages.ts","redux/selectors/rate.ts","List/Message.tsx","List/List.tsx","redux/rate.ts","hooks/useMessages.ts","fakeApi.ts","redux/selectors/messages.ts","App.tsx","hooks/useRate.ts","redux/index.ts","index.tsx"],"names":["MessageType","messageToInsert","text","canDelete","messageType","messageContent","shuffledMessageList","id","btcAmount","source","amount","sort","Math","random","mesagesSlice","createSlice","name","initialState","messages","customCount","reducers","load","state","action","payload","addServiceMessage","message","after","newMessage","custom","splice","findIndex","item","deleteMessage","messageId","actions","reducer","selectRate","createSelector","rate","value","bpi","USD","rate_float","allMessages","Message","props","useSelector","inputRef","useRef","useState","isAddingServiceMessage","setIsAddingServiceMessage","onAddServiceMessageClick","useCallback","onCancelServiceMessageClick","onSaveServiceMessageClick","current","onDeleteMessageClick","key","className","classnames","multiple","single","undefined","toFixed","Array","map","contentmessage","includes","ref","onClick","List","dispatch","useDispatch","addServiceMessageAction","deleteMessageAction","rateSlice","update","useMessages","isLoaded","setIsLoaded","useEffect","subscription","of","pipe","delay","subscribe","data","loadMessages","unsubscribe","selectAllMessages","App","isRateReady","interval","mergeMap","fetch","then","json","updateRate","useRate","areMessagesReady","isReadyToRender","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee6b1292.chunk.js","sourcesContent":["/* eslint-disable functional/immutable-data */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { messageToInsert } from \"../data-mocks/messages\";\n\ninterface MessagesState {\n    messages: Message[];\n    customCount: number;\n}\n\nconst initialState: MessagesState = { messages: [], customCount: 0 };\n\nexport enum MessageType {\n    custom = \"custom\",\n    multiple = \"multiple\",\n    single = \"single\",\n}\n\ninterface BasicMessage<T = string> {\n    text: string;\n    canDelete: boolean;\n    messageType: MessageType;\n    messageContent: T;\n    id: number | string;\n    btcAmount?: number;\n}\n\nexport type MultipleMessage = BasicMessage<Array<{ source: string; amount: number }>>;\nexport type SingleMessage = BasicMessage;\nexport type CustomMessage = BasicMessage;\n\nexport type Message = MultipleMessage | SingleMessage | CustomMessage;\n\nconst mesagesSlice = createSlice({\n    name: \"rate\",\n    initialState,\n    reducers: {\n        load(state, action: PayloadAction<Message[]>) {\n            state.messages = action.payload;\n        },\n        addServiceMessage(state, action: PayloadAction<{ message: string; after: Message[\"id\"] }>) {\n            const { message, after } = action.payload;\n            const newMessage: CustomMessage = {\n                ...messageToInsert,\n                id: `custom_${state.customCount}`,\n                messageType: MessageType.custom,\n                text: message || messageToInsert.text,\n            };\n            state.customCount++;\n            state.messages.splice(\n                state.messages.findIndex((item) => item.id === after) + 1,\n                0,\n                newMessage,\n            );\n        },\n        deleteMessage(state, action: PayloadAction<Message[\"id\"]>) {\n            const messageId = action.payload;\n            state.messages.splice(\n                state.messages.findIndex((item) => item.id === messageId),\n                1,\n            );\n        },\n    },\n});\n\nexport const { load, addServiceMessage, deleteMessage } = mesagesSlice.actions;\nexport const messages = mesagesSlice.reducer;\n","const messagesList = [\n    {\n        id: 0,\n        text: \"lorem ipsum 1\",\n        canDelete: false,\n        btcAmount: 0.000556,\n        messageType: \"single\",\n        messageContent: \"message content 1\",\n    },\n    {\n        id: 1,\n        text: \"lorem ipsum 2\",\n        canDelete: true,\n        btcAmount: 0.0026,\n        messageType: \"single\",\n        messageContent: \"message content 2\",\n    },\n    {\n        id: 2,\n        text: \"lorem ipsum 3\",\n        canDelete: true,\n        btcAmount: 0.0087,\n        messageType: \"single\",\n        messageContent: \"message content 3\",\n    },\n    {\n        id: 3,\n        text: \"lorem ipsum 4\",\n        canDelete: false,\n        btcAmount: 0.034556,\n        messageType: \"single\",\n        messageContent: \"message content 4\",\n    },\n    {\n        id: 4,\n        text: \"lorem ipsum 5\",\n        canDelete: true,\n        btcAmount: 0.004656,\n        messageType: \"single\",\n        messageContent: \"message content 5\",\n    },\n    {\n        id: 5,\n        text: \"lorem ipsum 6\",\n        canDelete: false,\n        btcAmount: 0.7663,\n        messageContent: [\n            { source: \"source1\", amount: 0.00443 },\n            { source: \"source2\", amount: 0.0366 },\n            { source: \"source3\", amount: 0.1874 },\n        ],\n        messageType: \"multiple\",\n    },\n    {\n        id: 6,\n        text: \"lorem ipsum 7\",\n        canDelete: true,\n        btcAmount: 0.00764,\n        messageContent: [\n            { source: \"source1\", amount: 0.355 },\n            { source: \"source2\", amount: 0.8451 },\n            { source: \"source3\", amount: 0.00123 },\n        ],\n        messageType: \"multiple\",\n    },\n    {\n        id: 7,\n        text: \"lorem ipsum 8\",\n        canDelete: false,\n        btcAmount: 0.887711,\n        messageContent: [\n            { source: \"source1\", amount: 0.0043 },\n            { source: \"source2\", amount: 0.9983 },\n            { source: \"source3\", amount: 0.764 },\n        ],\n        messageType: \"multiple\",\n    },\n];\n\nexport const messageToInsert = {\n    text: \"New custom message\",\n    canDelete: true,\n    messageType: \"custom\",\n    messageContent: \"This is only service message\",\n};\n\nexport const shuffledMessageList = [...messagesList].sort(() => Math.random() - 0.5);\n","import { createSelector } from \"reselect\";\n\nimport { RootState } from \"../\";\n\nexport const selectRate = createSelector(\n    (state: RootState) => state.rate.value?.bpi.USD.rate_float,\n    (allMessages) => allMessages,\n);\n","import React, { useCallback, useState, useRef } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport classnames from \"classnames\";\n\nimport { Message as TMessage, MessageType } from \"../redux/messages\";\nimport { selectRate } from \"../redux/selectors/rate\";\n\ninterface Props {\n    message: TMessage;\n    addServiceMessage: (after: TMessage[\"id\"], message: string) => void;\n    deleteMessage: (messageId: TMessage[\"id\"]) => void;\n}\n\nexport const Message = (props: Props) => {\n    const { message, addServiceMessage, deleteMessage } = props;\n    const rate = useSelector(selectRate);\n\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    const [isAddingServiceMessage, setIsAddingServiceMessage] = useState(false);\n\n    const onAddServiceMessageClick = useCallback(() => {\n        setIsAddingServiceMessage(true);\n    }, [setIsAddingServiceMessage]);\n    const onCancelServiceMessageClick = useCallback(() => setIsAddingServiceMessage(false), []);\n    const onSaveServiceMessageClick = useCallback(() => {\n        addServiceMessage(message.id, inputRef.current?.value || \"\");\n        setIsAddingServiceMessage(false);\n    }, [addServiceMessage, message, inputRef, setIsAddingServiceMessage]);\n    const onDeleteMessageClick = useCallback(() => {\n        deleteMessage(message.id);\n    }, [deleteMessage, message]);\n\n    return (\n        <div\n            key={message.id}\n            className={classnames(\"message\", {\n                \"message-custom\": message.messageType === MessageType.custom,\n                \"message-multiple\": message.messageType === MessageType.multiple,\n                \"message-single\": message.messageType === MessageType.single,\n            })}\n        >\n            <div className=\"text\">{message.text}</div>\n            {message.btcAmount && rate !== undefined && (\n                <div className=\"btc-amount\">{(rate * message.btcAmount).toFixed(2)}</div>\n            )}\n            <div className=\"content\">\n                {message.messageContent instanceof Array\n                    ? message.messageContent.map((contentmessage) => (\n                          <div className=\"content-message\" key={contentmessage.source}>\n                              <span>amount: {contentmessage.amount}</span>{\" \"}\n                              <span>source: {contentmessage.source}</span>\n                          </div>\n                      ))\n                    : message.messageContent}\n            </div>\n            {[MessageType.multiple, MessageType.single].includes(message.messageType) &&\n                (isAddingServiceMessage ? (\n                    <div className=\"control-component\">\n                        <input ref={inputRef} />\n                        <button className=\"control-component\" onClick={onCancelServiceMessageClick}>\n                            Cancel\n                        </button>\n                        <button className=\"control-component\" onClick={onSaveServiceMessageClick}>\n                            Add\n                        </button>\n                    </div>\n                ) : (\n                    <button className=\"control-component\" onClick={onAddServiceMessageClick}>\n                        Add service message\n                    </button>\n                ))}\n            {message.canDelete && (\n                <button className=\"control-component\" onClick={onDeleteMessageClick}>\n                    Delete\n                </button>\n            )}\n        </div>\n    );\n};\n","import React, { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport {\n    Message,\n    addServiceMessage as addServiceMessageAction,\n    deleteMessage as deleteMessageAction,\n} from \"../redux/messages\";\nimport { Message as MessageComponent } from \"./Message\";\n\nimport \"./list.scss\";\n\ninterface Props {\n    messages: Message[];\n}\n\nexport const List = (props: Props) => {\n    const dispatch = useDispatch();\n\n    const addServiceMessage = useCallback(\n        (after: Message[\"id\"], message: string) => {\n            dispatch(addServiceMessageAction({ after, message }));\n        },\n        [dispatch],\n    );\n    const deleteMessage = useCallback(\n        (messageId: Message[\"id\"]) => {\n            dispatch(deleteMessageAction(messageId));\n        },\n        [dispatch],\n    );\n\n    return (\n        <div className=\"messages-list\">\n            {props.messages.map((item) => (\n                <MessageComponent\n                    addServiceMessage={addServiceMessage}\n                    deleteMessage={deleteMessage}\n                    key={item.id}\n                    message={item}\n                />\n            ))}\n        </div>\n    );\n};\n","/* eslint-disable functional/immutable-data */\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface Bpi {\n    USD: Currency;\n}\n\ninterface Currency {\n    code: string;\n    rate: string;\n    description: string;\n    rate_float: number;\n}\n\ninterface Time {\n    updated: string;\n    updatedISO: Date;\n    updateduk: string;\n}\n\ninterface Rate {\n    time: Time;\n    disclaimer: string;\n    bpi: Bpi;\n}\n\ninterface RateState {\n    value: Rate | null;\n}\n\nconst initialState: RateState = { value: null };\n\nconst rateSlice = createSlice({\n    name: \"rate\",\n    initialState,\n    reducers: {\n        update(state, action: PayloadAction<Rate>) {\n            state.value = action.payload;\n        },\n    },\n});\n\nexport const { update } = rateSlice.actions;\nexport const rate = rateSlice.reducer;\n","import { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport { getMessagesList } from \"../fakeApi\";\n\nimport { load as loadMessages } from \"../redux/messages\";\n\nexport const useMessages = () => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const subscription = getMessagesList().subscribe((data) => {\n            dispatch(loadMessages(data));\n            setIsLoaded(true);\n            data;\n        });\n\n        return () => subscription.unsubscribe();\n    }, [dispatch]);\n\n    return isLoaded;\n};\n","import { of } from \"rxjs\";\nimport { delay } from \"rxjs/operators\";\n\nimport { Message } from \"./redux/messages\";\n\nimport { shuffledMessageList } from \"./data-mocks/messages\";\n\nexport const getMessagesList = () =>\n    of((shuffledMessageList as unknown) as Message[]).pipe(delay(500));\n","import { createSelector } from \"reselect\";\n\nimport { RootState } from \"../\";\n\nconst selectMessages = (state: RootState) => state.messages.messages;\n\nexport const selectAllMessages = createSelector(selectMessages, (allMessages) => allMessages);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport { List } from \"./List/List\";\nimport { useRate } from \"./hooks/useRate\";\nimport { useMessages } from \"./hooks/useMessages\";\nimport { selectAllMessages } from \"./redux/selectors/messages\";\n\nimport \"@fortawesome/fontawesome-free/css/all.css\";\n\nexport const App = () => {\n    const isRateReady = useRate();\n    const areMessagesReady = useMessages();\n    const isReadyToRender = isRateReady && areMessagesReady;\n    const messages = useSelector(selectAllMessages);\n\n    return isReadyToRender ? (\n        <List messages={messages} />\n    ) : (\n        <div>\n            <span>We are loading rate for u. Wait a bit </span>\n            <i className=\"fas fa-spinner fa-spin\" />\n        </div>\n    );\n};\n","import { useState, useEffect } from \"react\";\nimport { interval } from \"rxjs\";\nimport { mergeMap } from \"rxjs/operators\";\nimport { useDispatch } from \"react-redux\";\n\nimport { update as updateRate } from \"../redux/rate\";\n\nconst fetchUrl = \"https://api.coindesk.com/v1/bpi/currentprice/USD.json\";\nconst poolingInterval = 10000;\n\nexport const useRate = () => {\n    const [isLoaded, setIsLoaded] = useState(false);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const subscription = interval(poolingInterval)\n            .pipe(mergeMap(() => fetch(fetchUrl).then((data) => data.json())))\n            .subscribe((data) => {\n                setIsLoaded(true);\n                dispatch(updateRate(data));\n\n                data;\n            });\n\n        return () => subscription.unsubscribe();\n    }, [dispatch]);\n\n    return isLoaded;\n};\n","import { createStore, combineReducers } from \"redux\";\n\nimport { rate } from \"./rate\";\nimport { messages } from \"./messages\";\n\nconst reducers = combineReducers({\n    rate,\n    messages,\n});\n\nexport const store = createStore(reducers, {});\n\nexport type RootState = ReturnType<typeof store.getState>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { App } from \"./App\";\nimport { store } from \"./redux\";\n\nimport \"@fortawesome/fontawesome-free/css/all.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}